//--------------------------------------------------------------------------//
//		TeX Module Control with HIDEMARU Macro								//
//																			//
//			Sugi-Macro  -Macro Factory for HIDEMARU Editor-					//
//			%COPYRIGHT%		//
//																			//
//--------------------------------------------------------------------------//

//!HEADER
//	INTERNAL VERSION	%VER_MAJOR%.%VER_MINOR%.%VER_RELEASE%
//	PURPOSE				MODULE CONTROL KERNEL
//	PLATFORM			INDEPENDENT
//

//	Registry Data
$REG_ROOT		=	"Sugi_Macro\\TeXModuleControl";
$REG_K_MACROCONFIG	=	"MacroConfig";	//	マクロの設定定義のサブキー
$REG_K_PLATFORM	=	"Platform";

//	Definition of execution code from interface macro
#EXEC_VIRTEX	=	1;
#EXEC_PREVIEW	=	2;

//	Definition of return code from scanfile.exe
#REQUIRE_BIBTEX		=	1;
#REQUIRE_MKIDX		=	2;
#REQUIRE_PDFTEX		=	4;
#REQUIRE_COMPILE	=	8;
#REQUIRE_ERROR		=	16;

//	Definition of execution flag from interface macro
#FLAG_STARTBIT	=	256;
#FLAG_COMPILEFORCED	=	  #FLAG_STARTBIT;
#FLAG_SUBCOMP		=	2*#FLAG_STARTBIT;
#FLAG_PRJCOMP		=	4*#FLAG_STARTBIT;	//	使ってないけど予約(^^;
#FLAG_COMPILEONCE	=	8*#FLAG_STARTBIT;

//	Definition of return code from module control micro-kernel
//		マクロからの戻り値の定義
//
#RETURN_COMPLETE	=	  0;		//	コンパイルが正常に終了
#RETURN_CONTINUE	=	  1;		//	リコンパイルが必要
#RETURN_EDIT		=	  2;		//	"e"でコンパイルを中止した。
#RETURN_STOP		=	  4;		//	"x"でコンパイルを中止した
#RETURN_ERROR		=	255;		//	コンパイル実行エラー

//	Get MacroFolder's Name
call _kernel_getmacrodir;
$MACRODIR = $$return + "\\tex_mc";

//	Message Data Information
$MSGINI	=	$MACRODIR + "\\message.ini";

//	Dynamic Data Information
$DYNINI	=	$MACRODIR + "\\dyndata.ini";
$DYN_MODULECMD	=	"ModuleCmd";	//	モジュール動作定義のサブキー
$DYN_MC_ACTION	=	"Action";
$DYN_PROJECT	=	"CurrentProjectInfo";	//	処理するファイルの情報

//	Platform Information (Hard Coding!!)
$PTYPE_NAME[0] = "TeXware";
$PTYPE_NAME[1] = "DVIware";
$PTYPE_NAME[2] = "MkIdxware";
$PTYPE_NAME[3] = "BibTeXware";
$MACNAME[0] = "virtex";
$MACNAME[1] = "preview";
$MACNAME[2] = "makeidx";
$MACNAME[3] = "bibtex";

##a = 0;
while (##a < 4) {
	$REG_ENUM[##a] = $PTYPE_NAME[##a] + "_Type";
	##a = ##a + 1;
}
call _kernel_getenumdatastr $REG_K_MACROCONFIG, 4;
##a = 0;
while (##a < 4) {
	$PNAME[##a] = $REG_VALUE[##a];
	##a = ##a + 1;
}

//	Current Project Information
$PROJECTDIR = getinistr($DYNINI,$DYN_PROJECT,"ProjectDir");
$FILENAME = getinistr($DYNINI,$DYN_PROJECT,"FileName");
$FULL_FILENAME = $PROJECTDIR + "\\" + $FILENAME;
#WAIT = getininum($DYNINI,$DYN_MODULECMD,"Wait");
if (#WAIT) {
	call _kernel_getdatanum $REG_K_MACROCONFIG, "TimeWait";
	#TIMEWAIT = ##return;
	if (!#TIMEWAIT) #TIMEWAIT = 2;
	writeinistr $DYNINI, $DYN_MODULECMD, "Wait", 0;
}

//	Subsequence Compile Information
$SUB_PARENT = "_tmc_par.tex";
$SUB_CHILD = "_tmc_sub.tex";
$SUB_CHILD_NOEXT = "_tmc_sub";

//	Tools Information
$TOOLDIR = $MACRODIR + "\\tools";
//	for GetLFN.exe Utility
$LFNCMD = "\"" + $TOOLDIR + "\\getlfn.exe\" ";
$LFNINI = $TOOLDIR + "\\getlfn.ini";
//	for Scanfile.exe Utility
$SCANCMD = "\"" + $TOOLDIR + "\\scanfile.exe\" ";

//	file extensions closed when compiling
#O_EXT_NUM = 6;
$O_EXT[0] = "log";
$O_EXT[1] = "aux";
$O_EXT[2] = "toc";
$O_EXT[3] = "ind";
$O_EXT[4] = "idx";
$O_EXT[5] = "out";

//	Main Routine
main:
	call _kernel_get_execcmd;
	#EXEC_CMD = ##return;
	call _kernel_write_execcmd 0;

	call _kernel_getdatanum $REG_K_MACROCONFIG, "OutputType";
	#OUTPUT_TYPE = ##return;
	call _local_scanfiles;
	if (##return == -1) {
		call _kernel_showmsg 0, "Error_Module_GetFileInfo";
		endmacro;
	} else if (##return > 0) ##comp = 1;
	else ##comp = (#EXEC_CMD & #FLAG_COMPILEFORCED);

	$SHORTNAME[0] = getinistr($DYNINI,$DYN_PROJECT, "ShortName_Old");
	$FULL_SHORTNAME[0] = $PROJECTDIR + "\\" + $SHORTNAME[0];
	$SHORTNAME[1] = getinistr($DYNINI,$DYN_PROJECT, "ShortName");
	$FULL_SHORTNAME[1] = $PROJECTDIR + "\\" + $SHORTNAME[1];

	// close previewer
	writeininum $DYNINI, $DYN_MODULECMD, $DYN_MC_ACTION, 1;
	call _kernel_execmacro $PNAME[1] + "\\" + $MACNAME[1] + ".mac";
	if ((!##return) ||
		getininum($DYNINI, $DYN_MODULECMD, "return_" + $MACNAME[1])
		!= #RETURN_SUCCESS) endmacro;
	writeininum $DYNINI, $DYN_MODULECMD, $DYN_MC_ACTION, 0;

	disablebreak;
	if (!##comp) {
		if (#OUTPUT_TYPE == 1) $$f = "PS";
		else if (#OUTPUT_TYPE == 2) $$f = "PDF";
		else $$f = "DVI";
		question $$f + 
				 " ファイルは最新の物です。\nそれでもコンパイルしますか？";
		##comp = result;
	}
	if (##comp) {
		call _local_makedvifile;
		if (##return >= #RETURN_EDIT) endmacro;
	}
	if (#EXEC_CMD & #EXEC_PREVIEW) call _local_runmodule 1;
	endmacro;

//	end of main

_local_scanfiles:
	call _kernel_runapp $SCANCMD + "\"" + $FULL_FILENAME + "\"";//	空白ＯＫ
	if (!##return) return -1;

	##apps = getininum($DYNINI, $DYN_MODULECMD, "require_apps");
	writeininum $DYNINI, $DYN_MODULECMD, "require_apps", 0;

	if (##apps & #REQUIRE_ERROR) return -1;
	if (##apps & #REQUIRE_PDFTEX) #OUTPUT_TYPE = 2;

	if (#OUTPUT_TYPE == 2) $OUTPUTEXT = ".pdf";
	else $OUTPUTEXT = ".dvi"; // ps ファイルも含む
	writeinistr $DYNINI, $DYN_PROJECT, "OutputExt", $OUTPUTEXT;

	call _kernel_getdatanum $REG_K_PLATFORM, "InstalledWare";
	if (##return & 4) #MAKEINDEX = (##apps & #REQUIRE_MKIDX);
	if (##return & 8) #BIBTEX = (##apps & #REQUIRE_BIBTEX);

	return (##apps & #REQUIRE_COMPILE);

_local_makedvifile:
	call _local_closefiles;

//	コンパイルループ(何じゃそりゃ(^^;)
__do_compile:
	// CompileState が２以上のときはコンパイル以外の動作をしない
	// (pTeX2/virtex.mac のみ)
	writeininum $DYNINI, $DYN_MODULECMD, "CompileState",
				1 + (#MAKEINDEX != 0 || (#EXEC_CMD & #FLAG_COMPILEONCE) != 0);

	##maxcomp = 3;
	while (##maxcomp) {
		call _local_runmodule 0;
		#ERROR_CODE = ##return;
		// コンパイル失敗もしくは「１回だけコンパイル」の場合は無条件に終了
		if (#ERROR_CODE >= #RETURN_EDIT ||
			(#EXEC_CMD & #FLAG_COMPILEONCE)) goto __finish_compile;
		if (#ERROR_CODE == #RETURN_COMPLETE) break;
		if (#BIBTEX) {
			call _local_runmodule 3;
			if (##return == #RETURN_ERROR) {
				#ERROR_CODE = #RETURN_ERROR;
				goto __finish_compile;
			}
			#BIBTEX = 0;
		}
		##maxcomp = ##maxcomp - 1;
	}

	// MakeIndex 処理が必要な場合
	if (#MAKEINDEX) {
		call _local_runmodule 2;
		if (##return == #RETURN_ERROR) {
			#ERROR_CODE = #RETURN_ERROR;
			goto __finish_compile;
		}
		#MAKEINDEX = 0;
		goto __do_compile; // もう１回(dvipdfm が必要なときは２回)コンパイル
	}

__finish_compile:
	writeininum $DYNINI, $DYN_MODULECMD, "CompileState", 0;

	call _local_openfiles;

	if (#ERROR_CODE != #RETURN_EDIT) return #ERROR_CODE;

	$ERRFILE = getinistr($DYNINI, $DYN_MODULECMD, "Error_FileName");
	#ERRLINE = getininum($DYNINI, $DYN_MODULECMD, "Error_Line");
	writeinistr $DYNINI, $DYN_MODULECMD, "Error_FileName", 0;
	writeinistr $DYNINI, $DYN_MODULECMD, "Error_Line", 0;

	if (strstr($ERRFILE, "\\") == -1) $ERRFILE = $PROJECTDIR + "\\" + $ERRFILE;
	if (strstr(directory, "~") != -1) {
		call _kernel_runapp $LFNCMD + "\"" + filename + "\"";
		if (!##return) return #RETURN_ERROR;
		else {
			$$thisfile = getinistr($LFNINI, "Result", "filename");
			if ($$thisfile == "") {
				$MSGARG[0] = $TOOLDIR;
				$MSGARG[1] = "getlfn.ini";
				call _kernel_showmsg 0, "Error_Access_ForbiddenRead";
				return #RETURN_ERROR;
			}
		}
	} else $$thisfile = filename;

__start_openerrfile:
	if ($ERRFILE != $$thisfile) {
		if (#EXEC_CMD & #FLAG_SUBCOMP) {
			$$subcomp = "SubComp_Data";
			if ($ERRFILE == $PROJECTDIR + "\\" + $SUB_CHILD) {
				$ERRFILE = $PROJECTDIR + "\\" + 
					getinistr($DYNINI, $$subcomp, "OrgFileName");
				#ERRLINE = #ERRLINE + 
					getininum($DYNINI, $$subcomp, "Error_Line_Offset");
			} else if ($ERRFILE == $PROJECTDIR + "\\" + $SUB_PARENT)
				$ERRFILE = $PROJECTDIR + "\\" + 
							getinistr($DYNINI, $$subcomp, "OrgFileName");
			#EXEC_CMD = #EXEC_CMD ^ #FLAG_SUBCOMP;
			writeinistr $DYNINI, $$subcomp, "Error_Line_Offset", 0;
			writeinistr $DYNINI, $$subcomp, "OrgFileName", 0;
			goto __start_openerrfile;
		}
		##hwnd_err = findhidemaru($ERRFILE);
		if (##hwnd_err > -1) // hidemaruhandle(-1) != 0 の場合があるらしい
			call _kernel_activatehm hidemaruhandle(##hwnd_err);
		else
			openfile "\"" + $ERRFILE + "\"";	//	空白ＯＫ
	}
	movetolineno 1, #ERRLINE;

	return #RETURN_EDIT;

_local_runmodule:
	if (!existfile($MACRODIR + "\\" + $PNAME[##1] + "\\" + 
				   $MACNAME[##1] + ".mac")) {
		call _kernel_showmsg 0, "Error_Module_InvalidMacroCall";
		return #RETURN_ERROR;
	}
	if (#WAIT) {
		call _local_wait $MACNAME[##1];
		if (##return) return #RETURN_CONTINUE;
	}
	if (##1 == 0) $$file = $FULL_FILENAME;
	else {
		##v = 1;
		while (##v >= 0) {
			if (##1 == 1) $$file = $FULL_SHORTNAME[##v] + $OUTPUTEXT;
			else		  $$file = $FULL_SHORTNAME[##v] + "." + 
										midstr("idxaux", (##1 - 2) * 3, 3);
			if (existfile($$file)) break;
			##v = ##v - 1;
		}
		if (##v == -1) return #RETURN_ERROR;
		writeinistr $DYNINI, $DYN_PROJECT, "ShortName", $SHORTNAME[##v];
	}
	title "NOW CALLING " + $MACNAME[##1] + " Module for: " + $$file;
	call _kernel_execmacro $PNAME[##1] + "\\" + $MACNAME[##1] + ".mac";
	title 0;
	return getininum($DYNINI, $DYN_MODULECMD, "return_" + $MACNAME[##1]);

_local_wait:
	##l = #TIMEWAIT*1000;
	##et = tickcount + ##l;
	while (1) {
		##dt = ##et - tickcount;
		if (##dt <= 0) {
			##ret = 0;
			break;
		}
		##k = keypressed;
		if (##k) {
			if (##k == 'Q') endmacro;
			else if (##k == 'S') ##ret = 1;
			else if (##k == 0x0D || ##k == 'C') ##ret = 0;
			break;
		}
		if (##dt <= ##l) {
			title "PRESS [Q]uit, [S]kip, [C]ontinue : " + $$1 + " -- " + 
				leftstr("■■■■■", (##l / 1000) * 2);
			##l = ##l - 1000;
		}
	}
	title 0;
	return ##ret;

_local_closefiles:
	##a = 0;
	while (##a < #O_EXT_NUM) {
		#O_WND[##a] = 0;
		##v = 1;
		while (##v >= 0) {
			#O_WND[##a]
				= findhidemaru($FULL_SHORTNAME[##v] + "." + $O_EXT[##a]);
			if (#O_WND[##a] != -1) {
				#O_WND[##a] = hidemaruhandle(#O_WND[##a]);
				if (#O_WND[##a] == -1) #O_WND[##a] = 0;
				else closehidemaruforced #O_WND[##a];
				break;
			}
			#O_WND[##a] = 0;
			##v = ##v - 1;
		}
		##a = ##a + 1;
	}
	return;

_local_openfiles:
	##ownd = hidemaruhandle(0);
	if (#O_WND[0] != 0) { // log file
		##v = 1;
		while (##v >= 0) {
			call _kernel_openlogfile $FULL_SHORTNAME[##v] + ".log";
			if (##return != 0) {
				call _kernel_activatehm ##ownd;
				break;
			}
			##v = ##v - 1;
		}
	}
	##a = 1;
	while (##a < #O_EXT_NUM) {
		if (#O_WND[##a] != 0) {
			##v = 1;
			while (##v >= 0) {
				call _kernel_openhm $FULL_SHORTNAME[##v] + "." + $O_EXT[##a];
				if (##return != 0) {
					call _kernel_activatehm ##ownd;
					break;
				}
				##v = ##v - 1;
			}
		}
		##a = ##a + 1;
	}
	return;

//------------------------------------------//
//	- Module Control Service Functions -	//
//------------------------------------------//

